package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/waffleboot/giiter/internal/git.GitRunner -o ./internal/git/mocks/git_runner.go -n GitRunnerMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// GitRunnerMock implements git.GitRunner
type GitRunnerMock struct {
	t minimock.Tester

	funcAllBranches          func(ctx context.Context) (sa1 []string, err error)
	inspectFuncAllBranches   func(ctx context.Context)
	afterAllBranchesCounter  uint64
	beforeAllBranchesCounter uint64
	AllBranchesMock          mGitRunnerMockAllBranches
}

// NewGitRunnerMock returns a mock for git.GitRunner
func NewGitRunnerMock(t minimock.Tester) *GitRunnerMock {
	m := &GitRunnerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AllBranchesMock = mGitRunnerMockAllBranches{mock: m}
	m.AllBranchesMock.callArgs = []*GitRunnerMockAllBranchesParams{}

	return m
}

type mGitRunnerMockAllBranches struct {
	mock               *GitRunnerMock
	defaultExpectation *GitRunnerMockAllBranchesExpectation
	expectations       []*GitRunnerMockAllBranchesExpectation

	callArgs []*GitRunnerMockAllBranchesParams
	mutex    sync.RWMutex
}

// GitRunnerMockAllBranchesExpectation specifies expectation struct of the GitRunner.AllBranches
type GitRunnerMockAllBranchesExpectation struct {
	mock    *GitRunnerMock
	params  *GitRunnerMockAllBranchesParams
	results *GitRunnerMockAllBranchesResults
	Counter uint64
}

// GitRunnerMockAllBranchesParams contains parameters of the GitRunner.AllBranches
type GitRunnerMockAllBranchesParams struct {
	ctx context.Context
}

// GitRunnerMockAllBranchesResults contains results of the GitRunner.AllBranches
type GitRunnerMockAllBranchesResults struct {
	sa1 []string
	err error
}

// Expect sets up expected params for GitRunner.AllBranches
func (mmAllBranches *mGitRunnerMockAllBranches) Expect(ctx context.Context) *mGitRunnerMockAllBranches {
	if mmAllBranches.mock.funcAllBranches != nil {
		mmAllBranches.mock.t.Fatalf("GitRunnerMock.AllBranches mock is already set by Set")
	}

	if mmAllBranches.defaultExpectation == nil {
		mmAllBranches.defaultExpectation = &GitRunnerMockAllBranchesExpectation{}
	}

	mmAllBranches.defaultExpectation.params = &GitRunnerMockAllBranchesParams{ctx}
	for _, e := range mmAllBranches.expectations {
		if minimock.Equal(e.params, mmAllBranches.defaultExpectation.params) {
			mmAllBranches.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAllBranches.defaultExpectation.params)
		}
	}

	return mmAllBranches
}

// Inspect accepts an inspector function that has same arguments as the GitRunner.AllBranches
func (mmAllBranches *mGitRunnerMockAllBranches) Inspect(f func(ctx context.Context)) *mGitRunnerMockAllBranches {
	if mmAllBranches.mock.inspectFuncAllBranches != nil {
		mmAllBranches.mock.t.Fatalf("Inspect function is already set for GitRunnerMock.AllBranches")
	}

	mmAllBranches.mock.inspectFuncAllBranches = f

	return mmAllBranches
}

// Return sets up results that will be returned by GitRunner.AllBranches
func (mmAllBranches *mGitRunnerMockAllBranches) Return(sa1 []string, err error) *GitRunnerMock {
	if mmAllBranches.mock.funcAllBranches != nil {
		mmAllBranches.mock.t.Fatalf("GitRunnerMock.AllBranches mock is already set by Set")
	}

	if mmAllBranches.defaultExpectation == nil {
		mmAllBranches.defaultExpectation = &GitRunnerMockAllBranchesExpectation{mock: mmAllBranches.mock}
	}
	mmAllBranches.defaultExpectation.results = &GitRunnerMockAllBranchesResults{sa1, err}
	return mmAllBranches.mock
}

//Set uses given function f to mock the GitRunner.AllBranches method
func (mmAllBranches *mGitRunnerMockAllBranches) Set(f func(ctx context.Context) (sa1 []string, err error)) *GitRunnerMock {
	if mmAllBranches.defaultExpectation != nil {
		mmAllBranches.mock.t.Fatalf("Default expectation is already set for the GitRunner.AllBranches method")
	}

	if len(mmAllBranches.expectations) > 0 {
		mmAllBranches.mock.t.Fatalf("Some expectations are already set for the GitRunner.AllBranches method")
	}

	mmAllBranches.mock.funcAllBranches = f
	return mmAllBranches.mock
}

// When sets expectation for the GitRunner.AllBranches which will trigger the result defined by the following
// Then helper
func (mmAllBranches *mGitRunnerMockAllBranches) When(ctx context.Context) *GitRunnerMockAllBranchesExpectation {
	if mmAllBranches.mock.funcAllBranches != nil {
		mmAllBranches.mock.t.Fatalf("GitRunnerMock.AllBranches mock is already set by Set")
	}

	expectation := &GitRunnerMockAllBranchesExpectation{
		mock:   mmAllBranches.mock,
		params: &GitRunnerMockAllBranchesParams{ctx},
	}
	mmAllBranches.expectations = append(mmAllBranches.expectations, expectation)
	return expectation
}

// Then sets up GitRunner.AllBranches return parameters for the expectation previously defined by the When method
func (e *GitRunnerMockAllBranchesExpectation) Then(sa1 []string, err error) *GitRunnerMock {
	e.results = &GitRunnerMockAllBranchesResults{sa1, err}
	return e.mock
}

// AllBranches implements git.GitRunner
func (mmAllBranches *GitRunnerMock) AllBranches(ctx context.Context) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmAllBranches.beforeAllBranchesCounter, 1)
	defer mm_atomic.AddUint64(&mmAllBranches.afterAllBranchesCounter, 1)

	if mmAllBranches.inspectFuncAllBranches != nil {
		mmAllBranches.inspectFuncAllBranches(ctx)
	}

	mm_params := &GitRunnerMockAllBranchesParams{ctx}

	// Record call args
	mmAllBranches.AllBranchesMock.mutex.Lock()
	mmAllBranches.AllBranchesMock.callArgs = append(mmAllBranches.AllBranchesMock.callArgs, mm_params)
	mmAllBranches.AllBranchesMock.mutex.Unlock()

	for _, e := range mmAllBranches.AllBranchesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmAllBranches.AllBranchesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAllBranches.AllBranchesMock.defaultExpectation.Counter, 1)
		mm_want := mmAllBranches.AllBranchesMock.defaultExpectation.params
		mm_got := GitRunnerMockAllBranchesParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAllBranches.t.Errorf("GitRunnerMock.AllBranches got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAllBranches.AllBranchesMock.defaultExpectation.results
		if mm_results == nil {
			mmAllBranches.t.Fatal("No results are set for the GitRunnerMock.AllBranches")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmAllBranches.funcAllBranches != nil {
		return mmAllBranches.funcAllBranches(ctx)
	}
	mmAllBranches.t.Fatalf("Unexpected call to GitRunnerMock.AllBranches. %v", ctx)
	return
}

// AllBranchesAfterCounter returns a count of finished GitRunnerMock.AllBranches invocations
func (mmAllBranches *GitRunnerMock) AllBranchesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAllBranches.afterAllBranchesCounter)
}

// AllBranchesBeforeCounter returns a count of GitRunnerMock.AllBranches invocations
func (mmAllBranches *GitRunnerMock) AllBranchesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAllBranches.beforeAllBranchesCounter)
}

// Calls returns a list of arguments used in each call to GitRunnerMock.AllBranches.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAllBranches *mGitRunnerMockAllBranches) Calls() []*GitRunnerMockAllBranchesParams {
	mmAllBranches.mutex.RLock()

	argCopy := make([]*GitRunnerMockAllBranchesParams, len(mmAllBranches.callArgs))
	copy(argCopy, mmAllBranches.callArgs)

	mmAllBranches.mutex.RUnlock()

	return argCopy
}

// MinimockAllBranchesDone returns true if the count of the AllBranches invocations corresponds
// the number of defined expectations
func (m *GitRunnerMock) MinimockAllBranchesDone() bool {
	for _, e := range m.AllBranchesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AllBranchesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAllBranchesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAllBranches != nil && mm_atomic.LoadUint64(&m.afterAllBranchesCounter) < 1 {
		return false
	}
	return true
}

// MinimockAllBranchesInspect logs each unmet expectation
func (m *GitRunnerMock) MinimockAllBranchesInspect() {
	for _, e := range m.AllBranchesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GitRunnerMock.AllBranches with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AllBranchesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAllBranchesCounter) < 1 {
		if m.AllBranchesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GitRunnerMock.AllBranches")
		} else {
			m.t.Errorf("Expected call to GitRunnerMock.AllBranches with params: %#v", *m.AllBranchesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAllBranches != nil && mm_atomic.LoadUint64(&m.afterAllBranchesCounter) < 1 {
		m.t.Error("Expected call to GitRunnerMock.AllBranches")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GitRunnerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAllBranchesInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GitRunnerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GitRunnerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAllBranchesDone()
}
